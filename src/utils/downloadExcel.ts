
import * as XLSX from 'xlsx';

export const downloadAsExcel = async (
  data: Array<Record<string, any>>,
  title: string,
  source?: string
): Promise<void> => {
  try {
    // Create a new workbook
    const workbook = XLSX.utils.book_new();
    
    // Add metadata sheet
    const metadataSheet = XLSX.utils.aoa_to_sheet([
      ['Report Title', title],
      ['Generated On', new Date().toLocaleString()],
      ['Source', source || 'AI Research Assistant'],
      ['Total Records', data.length.toString()],
      [''],
      ['Generated by Data Extractor Pro - AI Research Assistant']
    ]);
    
    XLSX.utils.book_append_sheet(workbook, metadataSheet, 'Metadata');
    
    // Prepare main data with S.No column
    const dataWithSerial = data.map((row, index) => ({
      'S.No': index + 1,
      ...row
    }));
    
    // Create main data sheet
    const dataSheet = XLSX.utils.json_to_sheet(dataWithSerial);
    
    // Auto-adjust column widths
    const colWidths = Object.keys(dataWithSerial[0] || {}).map(key => ({
      wch: Math.max(
        key.length,
        ...dataWithSerial.map(row => String(row[key] || '').length)
      )
    }));
    
    dataSheet['!cols'] = colWidths;
    
    // Add styling to headers
    const headerRange = XLSX.utils.decode_range(dataSheet['!ref'] || 'A1');
    for (let col = headerRange.s.c; col <= headerRange.e.c; col++) {
      const cellAddress = XLSX.utils.encode_cell({ r: 0, c: col });
      if (!dataSheet[cellAddress]) continue;
      
      dataSheet[cellAddress].s = {
        font: { bold: true, color: { rgb: "FFFFFF" } },
        fill: { fgColor: { rgb: "4F46E5" } },
        alignment: { horizontal: "center", vertical: "center" }
      };
    }
    
    XLSX.utils.book_append_sheet(workbook, dataSheet, 'Extracted Data');
    
    // Generate filename
    const sanitizedTitle = title.replace(/[^a-zA-Z0-9]/g, '_');
    const timestamp = new Date().toISOString().split('T')[0];
    const filename = `${sanitizedTitle}_${timestamp}.xlsx`;
    
    // Download the file
    XLSX.writeFile(workbook, filename);
    
  } catch (error) {
    console.error('Excel export error:', error);
    throw new Error('Failed to generate Excel file');
  }
};
